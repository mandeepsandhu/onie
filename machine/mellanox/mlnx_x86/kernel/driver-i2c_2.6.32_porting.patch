--- a/include/linux/i2c.h	2014-01-21 14:15:38.000000000 +0200
+++ b/include/linux/i2c.h	2014-03-02 15:15:28.677293000 +0200
@@ -431,6 +431,11 @@
 	struct list_head userspace_clients;
 
 	struct i2c_bus_recovery_info *bus_recovery_info;
+
+#define I2C_ADAP_BLK   0
+#define I2C_ADAP_UNBLK 1
+        volatile u8 blocked;            /* flag indicating unregistration by external component */
+
 };
 #define to_i2c_adapter(d) container_of(d, struct i2c_adapter, dev)
 
--- a/include/linux/i2c/pca954x.h	2014-01-21 14:15:38.000000000 +0200
+++ b/include/linux/i2c/pca954x.h	2014-03-02 16:33:07.617308000 +0200
@@ -45,4 +45,10 @@
 	int num_modes;
 };
 
+/* Reset client */
+int pca954x_reset(struct i2c_client *client);
+
+/* Block or unblock client */
+int pca954x_block_unblock(struct i2c_client *client, u8 blk);
+
 #endif /* _LINUX_I2C_PCA954X_H */
--- a/drivers/i2c/i2c-core.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/i2c-core.c	2014-03-02 16:11:33.866977000 +0200
@@ -52,10 +52,37 @@
    calls are serialized */
 static DEFINE_MUTEX(core_lock);
 static DEFINE_IDR(i2c_adapter_idr);
+static DEFINE_MUTEX(ext_user_lock);
 
 static struct device_type i2c_client_type;
 static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver);
 
+/**
+ * i2c_lock_ext_user - Get exclusive access to an I2C bus segment
+ */
+static inline int i2c_lock_ext_user(void)
+{
+	int ret;
+
+	if (in_atomic() || irqs_disabled()) {
+		ret = mutex_trylock(&ext_user_lock);
+		if (!ret)
+			/* I2C activity is ongoing. */
+			return -EAGAIN;
+	} else {
+		mutex_lock(&ext_user_lock);
+	}
+}
+
+
+/**
+ * i2c_unlock_ext_user - Release exclusive access to an I2C bus segment
+ */
+static inline void i2c_unlock_ext_user(void)
+{
+	mutex_unlock(&ext_user_lock);
+}
+
 /* ------------------------------------------------------------------------- */
 
 static const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,
@@ -635,6 +662,7 @@
 	if (!client)
 		return NULL;
 
+        adap->blocked = I2C_ADAP_UNBLK;
 	client->adapter = adap;
 
 	client->dev.platform_data = info->platform_data;
@@ -999,6 +1027,7 @@
 		return -EINVAL;
 	}
 
+        adap->blocked = I2C_ADAP_UNBLK;
 	rt_mutex_init(&adap->bus_lock);
 	mutex_init(&adap->userspace_clients_lock);
 	INIT_LIST_HEAD(&adap->userspace_clients);
@@ -1537,6 +1566,11 @@
 	 *    one (discarding status on the second message) or errno
 	 *    (discarding status on the first one).
 	 */
+        if (adap->blocked == I2C_ADAP_BLK) {
+                printk(KERN_INFO "%s(%d) reject xfer adap %d\n", __FUNCTION__, __LINE__, adap->nr);
+                return -EBUSY;
+        }
+        dev_dbg(&adap->dev,"nr=%d xfer=%p", adap->nr, adap->algo->master_xfer);
 
 	if (adap->algo->master_xfer) {
 #ifdef DEBUG
@@ -1548,17 +1582,21 @@
 		}
 #endif
 
+		//i2c_lock_ext_user();
 		if (in_atomic() || irqs_disabled()) {
 			ret = i2c_trylock_adapter(adap);
-			if (!ret)
+			if (!ret) {
 				/* I2C activity is ongoing. */
+				//i2c_unlock_ext_user();
 				return -EAGAIN;
+			}
 		} else {
 			i2c_lock_adapter(adap);
 		}
 
 		ret = __i2c_transfer(adap, msgs, num);
 		i2c_unlock_adapter(adap);
+		//i2c_unlock_ext_user();
 
 		return ret;
 	} else {
@@ -2294,6 +2332,11 @@
 	int try;
 	s32 res;
 
+        if (adapter->blocked == I2C_ADAP_BLK) {
+                printk("%s(%d) reject xfer adap %d\n", __FUNCTION__, __LINE__, adapter->nr);
+                return -EBUSY;
+        }
+
 	flags &= I2C_M_TEN | I2C_CLIENT_PEC | I2C_CLIENT_SCCB;
 
 	if (adapter->algo->smbus_xfer) {
--- a/drivers/i2c/i2c-dev.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/i2c-dev.c	2014-03-02 15:06:28.668942000 +0200
@@ -54,7 +54,7 @@
 	struct device *dev;
 };
 
-#define I2C_MINORS	256
+#define I2C_MINORS	32768
 static LIST_HEAD(i2c_dev_list);
 static DEFINE_SPINLOCK(i2c_dev_list_lock);
 
--- a/drivers/i2c/i2c-mux.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/i2c-mux.c	2014-03-02 16:14:24.662001000 +0200
@@ -47,6 +47,16 @@
 	struct i2c_adapter *parent = priv->parent;
 	int ret;
 
+        if (adap->blocked == I2C_ADAP_BLK) {
+                printk("%s(%d) reject xfer adap %d\n", __FUNCTION__, __LINE__, adap->nr);
+                return -EBUSY;
+        }
+        if (parent->blocked == I2C_ADAP_BLK) {
+                printk("%s(%d) reject xfer adap %d\n", __FUNCTION__, __LINE__, parent->nr);
+                return -EBUSY;
+        }
+
+
 	/* Switch to the right mux port and perform the transfer. */
 
 	ret = priv->select(parent, priv->mux_priv, priv->chan_id);
@@ -140,6 +150,7 @@
 	priv->adap.algo = &priv->algo;
 	priv->adap.algo_data = priv;
 	priv->adap.dev.parent = &parent->dev;
+        priv->adap.blocked = I2C_ADAP_UNBLK;
 
 	/* Sanity check on class */
 	if (i2c_mux_parent_classes(parent) & class)
--- a/drivers/i2c/muxes/i2c-mux-pca954x.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/muxes/i2c-mux-pca954x.c	2014-03-02 16:24:31.637185000 +0200
@@ -39,6 +39,7 @@
 #include <linux/init.h>
 #include <linux/slab.h>
 #include <linux/device.h>
+#include <linux/delay.h>
 #include <linux/i2c.h>
 #include <linux/i2c-mux.h>
 
@@ -181,6 +182,7 @@
 /*
  * I2C init/probing/exit functions
  */
+#define DEF_TIMEOUT 16
 static int pca954x_probe(struct i2c_client *client,
 			 const struct i2c_device_id *id)
 {
@@ -189,6 +191,7 @@
 	int num, force, class;
 	struct pca954x *data;
 	int ret = -ENODEV;
+	int timeout = DEF_TIMEOUT;
 
 	if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
 		goto err;
@@ -205,10 +208,15 @@
 	 * that the mux is in fact present. This also
 	 * initializes the mux to disconnected state.
 	 */
+retry_probe:
 	if (i2c_smbus_write_byte(client, 0) < 0) {
-		dev_warn(&client->dev, "probe failed\n");
-		goto exit_free;
-	}
+                if (--timeout) {
+                        msleep(50); /* wait for 50 msec */
+                        goto retry_probe;
+                }
+                dev_warn(&client->dev, "reset failed\n");
+                goto exit_free;
+        }
 
 	data->type = id->driver_data;
 	data->last_chan = 0;		   /* force the first selection */
@@ -274,6 +282,42 @@
 	return 0;
 }
 
+int pca954x_reset(struct i2c_client *client)
+{
+        struct i2c_adapter *adap = to_i2c_adapter(client->dev.parent);
+        struct pca954x *data;
+
+        if (!i2c_check_functionality(adap, I2C_FUNC_SMBUS_BYTE))
+                return -ENODEV;
+
+        data = i2c_get_clientdata(client);
+
+        /* Read the mux register at addr to verify
+         * that the mux is in fact present.
+         */
+        if (i2c_smbus_read_byte(client) < 0) {
+                dev_warn(&client->dev, "reset failed\n");
+                return -ENODEV;
+        }
+        data->last_chan = 0;               /* force the first selection */
+
+        return 0;
+}
+EXPORT_SYMBOL_GPL(pca954x_reset);
+
+int pca954x_block_unblock(struct i2c_client *client, u8 blk)
+{
+        struct pca954x *data = i2c_get_clientdata(client);
+        const struct chip_desc *chip = &chips[data->type];
+        int i;
+        for (i = 0; i < chip->nchans; ++i) {
+                if (data && data->virt_adaps[i])
+                        data->virt_adaps[i]->blocked = blk;
+        }
+        return 0;
+}
+EXPORT_SYMBOL_GPL(pca954x_block_unblock);
+
 static struct i2c_driver pca954x_driver = {
 	.driver		= {
 		.name	= "pca954x",
--- a/drivers/i2c/busses/i2c-ibm_iic.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/busses/i2c-ibm_iic.c	2014-03-02 15:11:59.696828000 +0200
@@ -688,6 +688,7 @@
 	return irq;
 }
 
+static int iic_dev_idx = 0;
 /*
  * Register single IIC interface
  */
@@ -750,7 +751,8 @@
 	adap->algo = &iic_algo;
 	adap->timeout = HZ;
 
-	ret = i2c_add_adapter(adap);
+	adap->nr = iic_dev_idx++;
+	ret = i2c_add_numbered_adapter(adap);
 	if (ret  < 0) {
 		dev_err(&ofdev->dev, "failed to register i2c adapter\n");
 		goto error_cleanup;
@@ -799,6 +801,7 @@
 
 static const struct of_device_id ibm_iic_match[] = {
 	{ .compatible = "ibm,iic", },
+	{ .compatible = "ibm,iic-460ex", },
 	{}
 };
 
--- a/drivers/i2c/busses/i2c-i801.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/i2c/busses/i2c-i801.c	2014-03-02 16:56:57.706483000 +0200
@@ -1102,6 +1102,7 @@
 }
 #endif
 
+static int i801_dev_idx = 0;
 static int i801_probe(struct pci_dev *dev, const struct pci_device_id *id)
 {
 	unsigned char temp;
@@ -1221,7 +1222,8 @@
 
 	snprintf(priv->adapter.name, sizeof(priv->adapter.name),
 		"SMBus I801 adapter at %04lx", priv->smba);
-	err = i2c_add_adapter(&priv->adapter);
+	priv->adapter.nr = i801_dev_idx++;
+	err = i2c_add_numbered_adapter(&priv->adapter);
 	if (err) {
 		dev_err(&dev->dev, "Failed to add SMBus adapter\n");
 		goto exit_free_irq;

