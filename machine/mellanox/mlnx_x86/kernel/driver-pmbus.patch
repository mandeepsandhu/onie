--- a/drivers/hwmon/pmbus/pmbus_core.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/hwmon/pmbus/pmbus_core.c	2014-03-03 18:39:29.689133000 +0200
@@ -763,6 +763,123 @@
 	return snprintf(buf, PAGE_SIZE, "%s\n", label->label);
 }
 
+/* Mellanox addition. Begin */
+static ssize_t pmbus_show_mfr_id(struct device *dev,
+                struct device_attribute *da, char *buf)
+{
+    int ret, len;
+    u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1], *str;
+    struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+
+    ret = i2c_smbus_read_i2c_block_data(client, PMBUS_MFR_ID, I2C_SMBUS_BLOCK_MAX, block_buffer);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to read Manufacturer ID\n");
+        return ret;
+    }
+    len = block_buffer[0];
+    block_buffer[(len+1)] = '\0';
+    str = &(block_buffer[1]);
+
+    return snprintf(buf, PAGE_SIZE, "%s\n", str);
+}
+
+static ssize_t pmbus_show_mfr_model(struct device *dev,
+                struct device_attribute *da, char *buf)
+{
+    int ret, len;
+    u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1], *str;
+    struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+    ret = i2c_smbus_read_i2c_block_data(client, PMBUS_MFR_MODEL, I2C_SMBUS_BLOCK_MAX, block_buffer);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to read Manufacturer Model\n");
+        return ret;
+    }
+    len = block_buffer[0];
+    block_buffer[(len+1)] = '\0';
+    str = &(block_buffer[1]);
+
+    return snprintf(buf, PAGE_SIZE, "%s\n", str);
+}
+
+static ssize_t pmbus_show_mfr_revision(struct device *dev,
+                struct device_attribute *da, char *buf)
+{
+    int ret, len;
+    u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1], *str;
+    struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+    ret = i2c_smbus_read_i2c_block_data(client, PMBUS_MFR_REVISION, 12, block_buffer);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to read Manufacturer Revision\n");
+        return ret;
+    }
+    len = block_buffer[0];
+    block_buffer[(len+1)] = '\0';
+    str = &(block_buffer[1]);
+
+    return snprintf(buf, PAGE_SIZE, "%s\n", str);
+}
+
+static ssize_t pmbus_show_mfr_serial(struct device *dev,
+                struct device_attribute *da, char *buf)
+{
+    int ret, len;
+    u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1], *str;
+    struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+    ret = i2c_smbus_read_i2c_block_data(client, PMBUS_MFR_SERIAL, I2C_SMBUS_BLOCK_MAX, block_buffer);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to read Manufacturer Serial\n");
+        return ret;
+    }
+    len = block_buffer[0];
+    block_buffer[(len+1)] = '\0';
+    str = &(block_buffer[1]);
+
+    return snprintf(buf, PAGE_SIZE, "%s\n", str);
+}
+
+static ssize_t pmbus_show_mfr_date(struct device *dev,
+                struct device_attribute *da, char *buf)
+{
+    int ret, len;
+    u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1], *str;
+    struct i2c_client *client = container_of(dev, struct i2c_client, dev);
+
+    ret = i2c_smbus_read_i2c_block_data(client, PMBUS_MFR_DATE, I2C_SMBUS_BLOCK_MAX, block_buffer);
+    if (ret < 0) {
+        dev_err(&client->dev, "Failed to read Manufacture Date\n");
+        return ret;
+    }
+    len = block_buffer[0];
+    block_buffer[(len+1)] = '\0';
+    str = &(block_buffer[1]);
+
+    return snprintf(buf, PAGE_SIZE, "%s\n", str);
+}
+
+static DEVICE_ATTR(mfr_id, 0444, pmbus_show_mfr_id, NULL);
+static DEVICE_ATTR(mfr_model, 0444, pmbus_show_mfr_model, NULL);
+static DEVICE_ATTR(mfr_revision, 0444, pmbus_show_mfr_revision, NULL);
+static DEVICE_ATTR(mfr_serial, 0444, pmbus_show_mfr_serial, NULL);
+static DEVICE_ATTR(mfr_date, 0444, pmbus_show_mfr_date, NULL);
+
+static struct attribute *pmbus_inventory_attrs[] = {
+    &dev_attr_mfr_id.attr,
+    &dev_attr_mfr_model.attr,
+    &dev_attr_mfr_revision.attr,
+    &dev_attr_mfr_serial.attr,
+    &dev_attr_mfr_date.attr,
+    NULL
+};
+
+static struct attribute_group pmbus_inventory_attr_grp = {
+    .attrs = pmbus_inventory_attrs
+};
+/* Mellanox addition. End */
+
 static int pmbus_add_attribute(struct pmbus_data *data, struct attribute *attr)
 {
 	if (data->num_attributes >= data->max_attributes - 1) {
@@ -1783,6 +1900,8 @@
 	return 0;
 
 out_hwmon_device_register:
+	sysfs_remove_group(&dev->kobj, &pmbus_inventory_attr_grp); /* Mellanox addition. */
+out_sysfs_free:
 	sysfs_remove_group(&dev->kobj, &data->group);
 out_kfree:
 	kfree(data->group.attrs);
@@ -1795,6 +1914,7 @@
 	struct pmbus_data *data = i2c_get_clientdata(client);
 	hwmon_device_unregister(data->hwmon_dev);
 	sysfs_remove_group(&client->dev.kobj, &data->group);
+	sysfs_remove_group(&client->dev.kobj, &pmbus_inventory_attr_grp); /* Mellanox addition. */
 	kfree(data->group.attrs);
 	return 0;
 }
--- a/drivers/hwmon/pmbus/ucd9200.c	2014-01-21 14:15:38.000000000 +0200
+++ b/drivers/hwmon/pmbus/ucd9200.c	2014-03-03 18:45:29.111447000 +0200
@@ -25,6 +25,7 @@
 #include <linux/slab.h>
 #include <linux/i2c.h>
 #include <linux/i2c/pmbus.h>
+#include <linux/ctype.h>
 #include "pmbus.h"
 
 #define UCD9200_PHASE_INFO	0xd2
@@ -52,14 +53,15 @@
 	u8 block_buffer[I2C_SMBUS_BLOCK_MAX + 1];
 	struct pmbus_driver_info *info;
 	const struct i2c_device_id *mid;
-	int i, j, ret;
+	int i, j, ret, n, len;
+	u8* buff;
 
 	if (!i2c_check_functionality(client->adapter,
 				     I2C_FUNC_SMBUS_BYTE_DATA |
 				     I2C_FUNC_SMBUS_BLOCK_DATA))
 		return -ENODEV;
 
-	ret = i2c_smbus_read_block_data(client, UCD9200_DEVICE_ID,
+	ret = i2c_smbus_read_i2c_block_data(client, UCD9200_DEVICE_ID, 8,
 					block_buffer);
 	if (ret < 0) {
 		dev_err(&client->dev, "Failed to read device ID\n");
@@ -68,8 +70,22 @@
 	block_buffer[ret] = '\0';
 	dev_info(&client->dev, "Device ID %s\n", block_buffer);
 
+	len = strlen(block_buffer);
+	for (n=0; n < len; n++) {
+		if (isalnum(block_buffer[n]))
+			break;
+	}		
+	if (n >= len) {
+		dev_err(&client->dev, "Incorrect device name\n");
+		return -ENODEV;
+	}
+	buff = &block_buffer[n];
+	len = strlen(buff);
+
 	for (mid = ucd9200_id; mid->name[0]; mid++) {
-		if (!strncasecmp(mid->name, block_buffer, strlen(mid->name)))
+		if (len != strlen(mid->name))
+			continue;	
+		if (!strncasecmp(mid->name, buff, strlen(mid->name)))
 			break;
 	}
 	if (!mid->name[0]) {
@@ -86,7 +102,7 @@
 	if (!info)
 		return -ENOMEM;
 
-	ret = i2c_smbus_read_block_data(client, UCD9200_PHASE_INFO,
+	ret = i2c_smbus_read_i2c_block_data(client, UCD9200_PHASE_INFO, 2,
 					block_buffer);
 	if (ret < 0) {
 		dev_err(&client->dev, "Failed to read phase information\n");
@@ -100,7 +116,7 @@
 	 * the first unconfigured rail.
 	 */
 	info->pages = 0;
-	for (i = 0; i < ret; i++) {
+	for (i = 1; i < ret; i++) {
 		if (!block_buffer[i])
 			break;
 		info->pages++;
